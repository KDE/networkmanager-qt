/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Source file was org.freedesktop.NetworkManager.Device.WifiP2P.xml
 *
 * qdbusxml2cpp is Copyright (C) The Qt Company Ltd. and other contributors.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef WIFIP2PINTERFACE_H
#define WIFIP2PINTERFACE_H

#include "generictypes.h"
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QObject>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.NetworkManager.Device.WifiP2P
 */
class OrgFreedesktopNetworkManagerDeviceWifiP2PInterface : public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
#ifdef NMQT_STATIC
    {
        return "org.kde.fakenetwork.Device.WifiP2P";
    }
#else
    {
        return "org.freedesktop.NetworkManager.Device.WifiP2P";
    }
#endif

public:
    OrgFreedesktopNetworkManagerDeviceWifiP2PInterface(const QString &service,
                                                       const QString &path,
                                                       const QDBusConnection &connection,
                                                       QObject *parent = nullptr);

    ~OrgFreedesktopNetworkManagerDeviceWifiP2PInterface();

    Q_PROPERTY(QString HwAddress READ hwAddress)
    inline QString hwAddress() const
    {
        return qvariant_cast<QString>(property("HwAddress"));
    }

    Q_PROPERTY(QList<QDBusObjectPath> Peers READ peers)
    inline QList<QDBusObjectPath> peers() const
    {
        return qvariant_cast<QList<QDBusObjectPath>>(property("Peers"));
    }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> StartFind(const QVariantMap &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QStringLiteral("StartFind"), argumentList);
    }

    inline QDBusPendingReply<> StopFind()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("StopFind"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void PeerAdded(const QDBusObjectPath &peer);
    void PeerRemoved(const QDBusObjectPath &peer);
    void PropertiesChanged(const QVariantMap &properties);
};

#endif
